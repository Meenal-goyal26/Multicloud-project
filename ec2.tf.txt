provider "aws" {
  region     = "ap-south-1"
  profile    = "amar"
}

# create key pair
resource "tls_private_key" "task1_key" {
 algorithm  = "RSA"
}


resource "local_file" "mykey_file" {
  content     = tls_private_key.task1_key.private_key_pem
  filename    = "mykey.pem"
}


resource "aws_key_pair" "mygenerate_key" {
 key_name  = "mykey"
 public_key = tls_private_key.task1_key.public_key_openssh

}

# create security group
resource "aws_security_group" "task1_securitygroup" {
  name        = "task1_securitygroup"
  description = "allow ssh and http traffic"


  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }




  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }


  egress {
    from_port       = 0
    to_port         = 0
    protocol        = "-1"
    cidr_blocks     = ["0.0.0.0/0"]
  }
}

# create an aws instance by the use of key pair and security group
variable "ami_id" {
  default = "ami-052c08d70def0ac62"
}
resource "aws_instance" "myos" {
  ami             = var.ami_id
  instance_type   = "t2.micro"
  key_name        = aws_key_pair.mygenerate_key.key_name
  security_groups = [aws_security_group.task1_securitygroup.name]
  vpc_security_group_ids  = [aws_security_group.task1_securitygroup.id]
  connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = tls_private_key.task1_key.private_key_pem
    port        = 22
    host        = aws_instance.myos.public_ip
}
  
  provisioner "remote-exec" {
       inline = [
              "sudo yum install httpd -y",
              "sudo systemctl start httpd",
              "sudo systemctl enable httpd",
              "sudo yum install git -y"
]
}
  tags = {
    Name = "task1 myos"
  }
}

# creating EBS volume
resource "aws_ebs_volume" "myvolume" {
  depends_on = [
         
         aws_instance.myos
     ]
     availability_zone = aws_instance.myos.availability_zone
  size              = 1


  tags = {
    Name = "ebsvol"
  }
}

# Attaching created volume to existing ec2 instance
resource "aws_volume_attachment" "ebs_att" {
  device_name = "/dev/sdh"
  volume_id   = "${aws_ebs_volume.myvolume.id}"
  
  instance_id = "${aws_instance.myos.id}"
  force_detach = true
}

# Mount the volume
resource "null_resource" "partition_and_mount"  {


depends_on = [
    aws_volume_attachment.ebs_att
  ]

 connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = tls_private_key.task1_key.private_key_pem
    host        = aws_instance.myos.public_ip
  }


provisioner "remote-exec" {
    inline = [
      "sudo mkfs.ext4  /dev/sdh",
      "sudo mount  /dev/sdh  /var/www/html",
      "sudo rm -rf /var/www/html/*",
      "sudo git clone https://github.com/Amar2582/MultiCloud-project.git /var/www/html/",
      "sudo setenforce 0"
    ]
  }
}

# Creating a s3 bucket and make it public readable
resource "aws_s3_bucket" "mybucket1" {

  bucket = "amar2582"
  acl    = "public-read"


  tags = {
	Name = "taskbucket"
  }

}

locals {

s3_origin_id = "myS3Origin"
}

# upload the image in this s3 bucket and give name is 'my_friends'. 

resource "aws_s3_bucket_object" "Squd" {
 depends_on = [
    aws_s3_bucket.mybucket1,
  ]
  bucket       =  "amar2582"
  key          = "Squd.jpg"
  source       = "C:/Users/AMAR/Pictures/squd.jpg"
  acl          = "public-read"
  content_type = "image or jpeg"
}

# creating CloudFront with S3 as origin to provide CDN(content delevery network)
resource "aws_cloudfront_distribution" "s3_distribution" {
  origin {
    domain_name = aws_s3_bucket.mybucket1.bucket_regional_domain_name
    origin_id   = local.s3_origin_id

  }


  enabled             = true
  is_ipv6_enabled     = true
  comment             = "Some comment"
  default_root_object = "index.php"


  logging_config {
    include_cookies = false
    bucket          = "amar2582.s3.amazonaws.com"
    prefix          = "myprefix"
  }


  default_cache_behavior {
    allowed_methods  = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = local.s3_origin_id


    forwarded_values {
      query_string = false


      cookies {
        forward = "none"
      }
    }


    viewer_protocol_policy = "allow-all"
    min_ttl                = 0
    default_ttl            = 3600
    max_ttl                = 86400
  }


  # Cache behavior with precedence 0
  ordered_cache_behavior {
    path_pattern     = "/content/immutable/*"
    allowed_methods  = ["GET", "HEAD", "OPTIONS"]
    cached_methods   = ["GET", "HEAD", "OPTIONS"]
    target_origin_id = local.s3_origin_id


    forwarded_values {
      query_string = false
      headers      = ["Origin"]


      cookies {
        forward = "none"
      }
    }


    min_ttl                = 0
    default_ttl            = 86400
    max_ttl                = 31536000
    compress               = true
    viewer_protocol_policy = "redirect-to-https"
  }


  # Cache behavior with precedence 1
  ordered_cache_behavior {
    path_pattern     = "/content/*"
    allowed_methods  = ["GET", "HEAD", "OPTIONS"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = local.s3_origin_id


    forwarded_values {
      query_string = false


      cookies {
        forward = "none"
      }
    }


    min_ttl                = 0
    default_ttl            = 3600
    max_ttl                = 86400
    compress               = true
    viewer_protocol_policy = "redirect-to-https"
  }


  price_class = "PriceClass_200"


  restrictions {
    geo_restriction {
      restriction_type = "none"
      
    }
  }


  tags = {
    Environment = "production"
  }


  viewer_certificate {
    cloudfront_default_certificate = true
  }
}
# Now to see the IP of our Instance

output "myosip" {
	value = aws_instance.myos.public_ip
}

